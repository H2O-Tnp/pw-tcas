// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  student_id    Int         @id @default(autoincrement())
  name          String
  surname       String
  email         String      @unique
  class         String?
  academic_year Int?
  scores        Score[]
  univisity     Univisity[]
}

model Score {
  score_id  Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student_id Int
  subject_id Int
  score      Float
  percentile Float?
  student    Student @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  subject    Subject @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade)
  // @@unique([student_id, subject_id]) // Composite unique constraint
}

model Subject {
  subject_id   Int     @id @default(autoincrement())
  subject_name String  @unique
  scores       Score[]
  // scores       Score[] @relation("SubjectScores") // Define the relation name for clarity
}

model Univisity {
  univisity_id Int @id @default(autoincrement())
  //   createdAt    DateTime @default(now())
  //   updatedAt    DateTime @updatedAt

  //   student_id   Int?
  //   faculties    String
  //   fields       String
  student    Student? @relation(fields: [student_id], references: [student_id])
  student_id Int?
}
